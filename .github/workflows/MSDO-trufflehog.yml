name: msdo-secret-scanning-trufflehog

on:
  workflow_call:
    inputs:
      branch:
        required: false
        type: string
        default: 'develop'
    secrets:
      GH_TOKEN:
        required: false

jobs:
  trufflehog-scan:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write
      actions: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Install TruffleHog and scan
        run: |
          ASSET_URL=$(curl -s https://api.github.com/repos/trufflesecurity/trufflehog/releases/latest \
            | jq -r '.assets[] | select(.name | test("linux_amd64.tar.gz$")) | .browser_download_url')
          curl -sSL "$ASSET_URL" -o trufflehog.tar.gz
          tar -xzf trufflehog.tar.gz
          chmod +x trufflehog
          sudo mv trufflehog /usr/local/bin/
          trufflehog filesystem . --json > trufflehog-findings.json || true

      - name: Convert TruffleHog output to SARIF
        run: |
          echo 'import json' > convert.py
          echo 'sarif = {"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "TruffleHog", "rules": []}}, "results": []}]}' >> convert.py
          echo 'with open("trufflehog-findings.json") as f:' >> convert.py
          echo '  for line in f:' >> convert.py
          echo '    finding = json.loads(line)' >> convert.py
          echo '    rule_id = "trufflehog-secret"' >> convert.py
          echo '    result = {' >> convert.py
          echo '      "ruleId": rule_id,' >> convert.py
          echo '      "level": "warning",' >> convert.py
          echo '      "message": {"text": finding.get("reason", "Secret detected")},' >> convert.py
          echo '      "locations": [{"physicalLocation": {"artifactLocation": {"uri": finding.get("path", "")}, "region": {"startLine": finding.get("line", 1)}}}]' >> convert.py
          echo '    }' >> convert.py
          echo '    sarif["runs"][0]["results"].append(result)' >> convert.py
          echo 'with open("trufflehog.sarif", "w") as out:' >> convert.py
          echo '  json.dump(sarif, out)' >> convert.py
          python3 convert.py

      - name: Upload SARIF to Microsoft Defender for DevOps
        uses: microsoft/security-devops-action@preview
        with:
          tools: trufflehog
          arguments: 'guardian upload --file trufflehog.sarif --tool trufflehog'